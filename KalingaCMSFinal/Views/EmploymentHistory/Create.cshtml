@model Tuple<KalingaCMSFinal.Models.EmpWorkHistory, IEnumerable<KalingaCMSFinal.Models.vw_EmploymentRecord>>

@{
    ViewBag.Title = "Create";
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <h2>Employment History</h2>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Item1.empID, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        <div class="row">
            <div class="form-group col-md-4" style="width:300px;">
                <label for="txtSearch" class="control-label">Search Employee</label>
                <div class="input-group">
                    <input type="text" name="txtSearch" id="txtSearch" class="form-control" placeholder="Search">
                    <div class="input-group-btn">
                        <button class="btn btn-default" type="submit" id="btnSearch" name="btnSearch">
                            <i class="glyphicon glyphicon-search"></i>
                        </button>
                    </div>
                </div>
            </div>
            <div class="form-group col-md-5">
            </div>
            <div class="form-group col-md-3">
                <img id="ProfilePicture" name="ProfilePicture" class="img-thumbnail" src="#" alt="ProfileImage" height="200" width="200">
            </div>
        </div>
        <br />
        <div class="row">
            <div class="form-group col-md-4">
                <label for="txtAgencyEmployeeNumber" class="control-label">Agency Employee Number</label>
                <div>
                    <input type="text" name="txtAgencyEmployeeNumber" id="txtAgencyEmployeeNumber" class="form-control" readonly>
                </div>
            </div>
            <div class="form-group col-md-4">
                <label for="txtEmployeeName" class="control-label">Employee Name</label>
                <div>
                    <input type="text" name="txtEmployeeName" id="txtEmployeeName" class="form-control" readonly>
                </div>
            </div>
        </div>
        <hr />
        <div class="form-group">
            @Html.LabelFor(model => model.Item1.Company, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.Item1.Company, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Item1.Company, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row">
            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.Item1.StartDate, htmlAttributes: new { @class = "control-label" })
                <div>
                    @Html.EditorFor(model => model.Item1.StartDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Item1.StartDate, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.Item1.EndDate, htmlAttributes: new { @class = "control-label" })
                <div>
                    @Html.EditorFor(model => model.Item1.EndDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Item1.EndDate, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.Item1.PositionID, htmlAttributes: new { @class = "control-label" })
                <div>
                    @Html.DropDownListFor(model => model.Item1.PositionID, ViewBag.Positions as SelectList, "--Select Position Title--", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Item1.PositionID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.Item1.MonthlySalary, htmlAttributes: new { @class = "control-label" })
                <div>
                    @Html.EditorFor(model => model.Item1.MonthlySalary, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Item1.MonthlySalary, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.Item1.SalaryGradeID, htmlAttributes: new { @class = "control-label" })
                <div>
                    @Html.DropDownListFor(model => model.Item1.SalaryGradeID, ViewBag.SalaryGrades as SelectList, "--Select Salary Grade---", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Item1.SalaryGradeID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.Item1.SGIncrementID, htmlAttributes: new { @class = "control-label" })
                <div>
                    @Html.DropDownListFor(model => model.Item1.SGIncrementID, ViewBag.StepIncrements as SelectList, "--Select Step Increment--", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Item1.SGIncrementID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.Item1.AppointmentStatusID, htmlAttributes: new { @class = "control-label" })
                <div>
                    @Html.DropDownListFor(model => model.Item1.AppointmentStatusID, ViewBag.AppointmentStatuses as SelectList, "--Select Appointment Status--", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Item1.AppointmentStatusID, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.Item1.IsGovService, htmlAttributes: new { @class = "control-label" })
                <div>
                    @Html.DropDownListFor(model => model.Item1.IsGovService, new List<SelectListItem>
                    {
                        new SelectListItem{ Text="--Is In Government Service?---", Value = "" },
                        new SelectListItem{ Text="Yes", Value = "True" },
                        new SelectListItem{ Text="No", Value = "False" },
                     }, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Item1.IsGovService, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.Item1.IsSupervisor, htmlAttributes: new { @class = "control-label" })
                <div>
                    @Html.DropDownListFor(model => model.Item1.IsSupervisor, new List<SelectListItem>
                    {
                        new SelectListItem{ Text="--Is Supervisor?--", Value = "" },
                        new SelectListItem{ Text="Yes", Value = "True" },
                        new SelectListItem{ Text="No", Value = "False" },
                     }, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Item1.IsSupervisor, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <br />
        <div class="form-group">
            <div class="col-md-offset-5 col-md-5">
                <input type="submit" value="Save" class="btn btn-default" id="SubmitBtn" />
            </div>
        </div>
    </div>
}
<hr />
<table class="table table-striped table-bordered" id="EmploymentHistoryTable">
    <thead>
        <tr>
            <th>
                Company
            </th>
            <th>
                Start Date
            </th>
            <th>
                End Date
            </th>
            <th>
                Position Description
            </th>
            <th>
                Monthly Salary
            </th>
            <th>
                Salary Grade
            </th>
            <th>
                Step Increment
            </th>
            <th>
                Appointment Status
            </th>
            <th>
                Government Service
            </th>
            <th>
                Action
            </th>
        </tr>
    </thead>
    <tbody id="EmploymentHistoryTableData">
    </tbody>
</table>
<div class="modal fade" id="myModal">
    <div class="modal-dialog">
        <div id="mainContent" class="modal-content col-sm-12">
        </div>
    </div>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            $("#SubmitBtn").on("click", function () {
                if ($("#Item1_empID").val() == "") {
                    alert("Search for an Employee first before saving a data!");
                    return false;
                };
            });
            var table = $('#EmploymentHistoryTable').DataTable({
                language: {
                    emptyTable: "", // 
                    loadingRecords: "Please wait .. ",
                    zeroRecords: ""
                }
            });
            $('#EmploymentHistoryTable').on("click", ".modalOpener", function (e) {
                e.preventDefault();
                //replace the get with this.href to load the edit page
                $.get(this.href, function (data) {
                    //replace the content returned
                    $("#mainContent").html(data);
                });
                //show the modal
                $('#myModal').modal({
                    keyboard: true,
                }, 'show');
                return false;
            });
            $("#txtSearch").autocomplete({
                source: '@Url.Action("Search","Education")'
            });
            $("#btnSearch").on("click", function (e) {
                e.preventDefault();
                $.get("@Url.Action("EmployeeName", "EmploymentHistory")", { Name: $("#txtSearch").val() }, function (EmployeeFullName, EmployeeNumber, EmployeeID, DisplayPicturePath) {
                    $("#txtEmployeeName").empty();
                    $("#txtAgencyEmployeeNumber").empty();
                    $("#Item1_empID").empty();
                    table.clear().draw();
                    $.each(EmployeeFullName, function (index, data) {
                        $("#txtEmployeeName").val(data.EmployeeFullName);
                        $("#txtAgencyEmployeeNumber").val(data.EmployeeNumber);
                        $("#Item1_empID").val(data.EmployeeID);
                        PicturePath = data.DisplayPicturePath.replace("~", "..");
                        $("#ProfilePicture").attr("src", PicturePath);
                    });
                    $.get("@Url.Action("WorkHistory", "EmploymentHistory")", { EmployeeID: $("#Item1_empID").val() },
                        function (WorkID, Company, Position, MonthlySalary, SalaryGradeCode, StepIncrement, StartDate, EndDate, StatusDescription, GovernmentService) {
                            $.each(WorkID, function (index, data) {
                            var EditButton = '@Html.ActionLink("Edit", "Edit", new { id = "WorkID" }, new { @class = "modalOpener editModal btn btn-info btn-sm glyphicon glyphicon-edit", @data_target = "editModal"})';
                            var DeleteButton = '@Html.ActionLink("Delete", "Delete", new { id = "WorkID" }, new { @class = "modalOpener deleteModal btn btn-danger btn-sm glyphicon glyphicon-trash", @data_target = "deleteModal" })';
                            EditButton = EditButton.replace("WorkID", parseInt(data.WorkID));
                            DeleteButton = DeleteButton.replace("WorkID", parseInt(data.WorkID));
                            StartDate = data.StartDate.replace(" 12:00:00 AM", "");
                            EndDate = data.EndDate.replace(" 12:00:00 AM", "");
                            table.row.add([
                                data.Company,
                                StartDate,
                                EndDate,
                                data.Position,
                                data.MonthlySalary,
                                data.SalaryGradeCode,
                                data.StepIncrement,
                                data.StatusDescription,
                                data.GovernmentService,
                                EditButton + "|" + DeleteButton,
                            ]);
                            table.draw();
                            
                    });
                });
                });
            });
            $('#myModal').on('shown.bs.modal', function (e) {
                var form = $("#editForm")
                    .removeData("validator") /* added by the raw jquery.validate plugin */
                    .removeData("unobtrusiveValidation");  /* added by the jquery unobtrusive plugin*/
                $.validator.unobtrusive.parse(form);
            });
        });
    </script>
}